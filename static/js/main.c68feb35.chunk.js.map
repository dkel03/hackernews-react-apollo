{"version":3,"sources":["serviceWorker.js","components/Header.js","constants.js","utils.js","components/Link.js","components/LinkList.js","components/CreateLink.js","components/Login.js","components/Search.js","components/App.js","index.js"],"names":["Boolean","window","location","hostname","match","withRouter","history","authToken","localStorage","getItem","className","to","onClick","removeItem","push","timeDifferenceForDate","date","current","previous","elapsed","milliSecondsPerMinute","Math","round","milliSecondsPerHour","milliSecondsPerDay","timeDifference","Date","getTime","VOTE_MUTATION","gql","Link","index","link","updateStoreAfterVote","mutation","variables","linkId","id","update","store","vote","data","voteMutation","description","url","votes","length","postedBy","name","createdAt","FEED_QUERY","NEW_LINKS_SUBSCRIPTION","NEW_VOTES_SUBSCRIPTION","LinkList","props","updateCacheAfterVote","createVote","isNewPage","pathname","includes","page","parseInt","params","skip","first","orderBy","readQuery","query","feed","links","find","writeQuery","previousPage","getQueryVariables","loading","error","subscribeToMore","document","updateQuery","prev","subscriptionData","newLink","Object","assign","count","__typename","subscribeToNewLinks","subscribeToNewVotes","linksToRender","rankedLinks","slice","sort","l1","l2","getLinksToRender","pageIndex","map","key","nextPage","POST_MUTATION","CreateLink","useState","setDescription","setUrl","value","onChange","e","target","type","placeholder","onCompleted","post","unshift","postMutation","SIGNUP_MUTATION","LOGIN_MUTATION","Login","login","setLogin","email","setEmail","password","setPassword","setName","confirm","a","signup","token","saveUserData","setItem","FEED_SEARCH_QUERY","withApollo","client","setLinks","filter","setFilter","executeSearch","result","App","exact","path","render","component","Search","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","wsLink","WebSocketLink","options","reconnect","connectionParams","split","getMainDefinition","kind","operation","concat","ApolloClient","cache","InMemoryCache","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"mRAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yECsCSC,G,MAAAA,aAnDA,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACVC,EAAYC,aAAaC,QCNP,cDOxB,OACE,yBAAKC,UAAU,0CACb,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,WACb,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,0BAAvB,gBAIF,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,0BAAvB,OAGA,yBAAKA,UAAU,OAAf,KACA,kBAAC,IAAD,CAAMC,GAAG,OAAOD,UAAU,0BAA1B,OAGA,yBAAKA,UAAU,OAAf,KACA,kBAAC,IAAD,CAAMC,GAAG,UAAUD,UAAU,0BAA7B,UAGCH,GACC,yBAAKG,UAAU,QACb,yBAAKA,UAAU,OAAf,KACA,kBAAC,IAAD,CAAMC,GAAG,UAAUD,UAAU,0BAA7B,YAMN,yBAAKA,UAAU,mBACZH,EACC,yBACEG,UAAU,oBACVE,QAAS,WACPJ,aAAaK,WCxCD,cDyCZP,EAAQQ,KAAR,OAJJ,UAUA,kBAAC,IAAD,CAAMH,GAAG,SAASD,UAAU,0BAA5B,e,yCEpBH,SAASK,EAAsBC,GAGpC,OA9BF,SAAwBC,EAASC,GAC/B,IAKMC,EAAUF,EAAUC,EAE1B,OAAIC,EAAUC,IACL,WAGLD,EAX0B,IAYrB,sBACEA,EAZiBC,KAanBC,KAAKC,MAAMH,EAdU,KAcyB,WAC5CA,EAbgBI,MAclBF,KAAKC,MAAMH,EAfQC,MAeyB,SAC1CD,EAdkBK,OAepBH,KAAKC,MAAMH,EAhBOI,OAgByB,YACzCJ,EAfiBK,QAgBnBH,KAAKC,MAAMH,EAjBSK,QAiByB,UAE7CH,KAAKC,MAAMH,EAlBQK,SAkByB,aAO9CC,EAFK,IAAIC,MAAOC,UACP,IAAID,KAAKV,GAAMW,W,kUCvBjC,IAAMC,EAAgBC,IAAH,KAwDJC,EApCF,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,qBACrB1B,EAAYC,aAAaC,QF3BP,cE4BxB,OACE,yBAAKC,UAAU,wBACb,yBAAKA,UAAU,qBACb,0BAAMA,UAAU,QAAQqB,EAAQ,EAAhC,KACCxB,GACC,kBAAC,IAAD,CACE2B,SAAUN,EACVO,UAAW,CAAEC,OAAQJ,EAAKK,IAC1BC,OAAQ,SAACC,EAAD,OAAkBC,EAAlB,EAAUC,KAAQD,KAAlB,OACNP,EAAqBM,EAAOC,EAAMR,EAAKK,OAGxC,SAACK,GAAD,OACC,yBAAKhC,UAAU,eAAeE,QAAS8B,GAAvC,cAOR,yBAAKhC,UAAU,OACb,6BACGsB,EAAKW,YADR,KACuBX,EAAKY,IAD5B,KAGA,yBAAKlC,UAAU,mBACZsB,EAAKa,MAAMC,OADd,cACiC,IAC9Bd,EAAKe,SAAWf,EAAKe,SAASC,KAAO,UAAW,IAChDjC,EAAsBiB,EAAKiB,e,kpCCjD/B,IAAMC,EAAarB,IAAH,KAuBjBsB,EAAyBtB,IAAH,KAoBtBuB,EAAyBvB,IAAH,KA2IbwB,EAhHE,SAACC,GAChB,IAAMC,EAAuB,SAAChB,EAAOiB,EAAYpB,GAC/C,IAAMqB,EAAYH,EAAMpD,SAASwD,SAASC,SAAS,OAC7CC,EAAOC,SAASP,EAAMlD,MAAM0D,OAAOF,KAAM,IACzCG,EAAON,EH/Ea,GG+EAG,EAAO,GAAsB,EACjDI,EAAQP,EHhFY,EGgFiB,IACrCQ,EAAUR,EAAY,iBAAmB,KACzChB,EAAOF,EAAM2B,UAAU,CAC3BC,MAAOjB,EACPf,UAAW,CAAE6B,QAAOD,OAAME,aAEVxB,EAAK2B,KAAKC,MAAMC,MAAK,SAACtC,GAAD,OAAUA,EAAKK,KAAOD,KACnDS,MAAQW,EAAWxB,KAAKa,MAClCN,EAAMgC,WAAW,CAAEJ,MAAOjB,EAAYT,UAiDlC+B,EAAe,WACnB,IAAMZ,EAAOC,SAASP,EAAMlD,MAAM0D,OAAOF,KAAM,IAC/C,GAAIA,EAAO,EAAG,CACZ,IAAMY,EAAeZ,EAAO,EAC5BN,EAAMhD,QAAQQ,KAAd,eAA2B0D,MAI/B,OACE,kBAAC,IAAD,CAAOL,MAAOjB,EAAYf,UAjCF,WACxB,IAAMsB,EAAYH,EAAMpD,SAASwD,SAASC,SAAS,OAC7CC,EAAOC,SAASP,EAAMlD,MAAM0D,OAAOF,KAAM,IAI/C,MAAO,CAAEI,MAFKP,EHrHY,EGqHiB,IAE3BM,KAHHN,EHpHa,GGoHAG,EAAO,GAAsB,EAGjCK,QADNR,EAAY,iBAAmB,MA4BVgB,KAClC,YAAgD,IAA7CC,EAA4C,EAA5CA,QAASC,EAAmC,EAAnCA,MAAOlC,EAA4B,EAA5BA,KAAMmC,EAAsB,EAAtBA,gBACxB,GAAIF,EAAS,OAAO,yCACpB,GAAIC,EAAO,OAAO,uCA3DI,SAACC,GAC3BA,EAAgB,CACdC,SAAU1B,EACV2B,YAAa,SAACC,EAAD,GAAiC,IAAxBC,EAAuB,EAAvBA,iBACpB,IAAKA,EAAiBvC,KAAM,OAAOsC,EACnC,IAAME,EAAUD,EAAiBvC,KAAKwC,QAEtC,OADeF,EAAKX,KAAKC,MAAMC,MAAK,qBAAGjC,KAAgB4C,EAAQ5C,MAC5C0C,EACZG,OAAOC,OAAO,GAAIJ,EAAM,CAC7BX,KAAM,CACJC,MAAM,CAAEY,GAAH,mBAAeF,EAAKX,KAAKC,QAC9Be,MAAOL,EAAKX,KAAKC,MAAMvB,OAAS,EAChCuC,WAAYN,EAAKX,KAAKiB,iBAiD1BC,CAAoBV,GA3CE,SAACA,GAC3BA,EAAgB,CACdC,SAAUzB,IA0CRmC,CAAoBX,GAEpB,IAAMY,EAjCa,SAAA/C,GAEvB,GADkBa,EAAMpD,SAASwD,SAASC,SAAS,OAEjD,OAAOlB,EAAK2B,KAAKC,MAEnB,IAAMoB,EAAchD,EAAK2B,KAAKC,MAAMqB,QAEpC,OADAD,EAAYE,MAAK,SAACC,EAAIC,GAAL,OAAYA,EAAGhD,MAAMC,OAAS8C,EAAG/C,MAAMC,UACjD2C,EA0BmBK,CAAiBrD,GACjCgB,EAAYH,EAAMpD,SAASwD,SAASC,SAAS,OAC7CoC,EAAYzC,EAAMlD,MAAM0D,OAAOF,KH5Jf,GG6JjBN,EAAMlD,MAAM0D,OAAOF,KAAO,GAC3B,EAEJ,OACE,kBAAC,WAAD,KACG4B,EAAcQ,KAAI,SAAChE,EAAMD,GAAP,OACjB,kBAAC,EAAD,CACEkE,IAAKjE,EAAKK,GACVL,KAAMA,EACND,MAAOA,EAAQgE,EACfxC,qBAAsBA,OAGzBE,GACC,yBAAK/C,UAAU,qBACb,yBAAKA,UAAU,cAAcE,QAAS4D,GAAtC,YAGA,yBAAK9D,UAAU,UAAUE,QAAS,kBA7C/B,SAAA6B,GACf,IAAMmB,EAAOC,SAASP,EAAMlD,MAAM0D,OAAOF,KAAM,IAC/C,GAAIA,GAAQnB,EAAK2B,KAAKgB,MHpII,EGoIoB,CAC5C,IAAMc,EAAWtC,EAAO,EACxBN,EAAMhD,QAAQQ,KAAd,eAA2BoF,KAyCuBA,CAASzD,KAAjD,c,uQC1KhB,IAAM0D,EAAgBtE,IAAH,KA0DJuE,EA/CI,SAAC,GAAiB,IAAf9F,EAAc,EAAdA,QAAc,EACI+F,mBAAS,IADb,mBAC3B1D,EAD2B,KACd2D,EADc,OAEZD,mBAAS,IAFG,mBAE3BzD,EAF2B,KAEtB2D,EAFsB,KAGlC,OACE,6BACE,yBAAK7F,UAAU,wBACb,2BACEA,UAAU,MACV8F,MAAO7D,EACP8D,SAAU,SAACC,GAAD,OAAOJ,EAAeI,EAAEC,OAAOH,QACzCI,KAAK,OACLC,YAAY,+BAEd,2BACEnG,UAAU,MACV8F,MAAO5D,EACP6D,SAAU,SAACC,GAAD,OAAOH,EAAOG,EAAEC,OAAOH,QACjCI,KAAK,OACLC,YAAY,0BAGhB,kBAAC,IAAD,CACE3E,SAAUiE,EACVhE,UAAW,CAAEQ,cAAaC,OAC1BkE,YAAa,kBAAMxG,EAAQQ,KAAK,WAChCwB,OAAQ,SAACC,EAAD,GAAgC,IAAdwE,EAAa,EAArBtE,KAAQsE,KAIlBtE,EAAOF,EAAM2B,UAAU,CAC3BC,MAAOjB,EACPf,UAAW,CAAE6B,MJ/CK,EI+CED,KAJT,EAIeE,QAHZ,oBAKhBxB,EAAK2B,KAAKC,MAAM2C,QAAQD,GACxBxE,EAAMgC,WAAW,CACfJ,MAAOjB,EACPT,OACAN,UAAW,CAAE6B,MJrDK,EIqDED,KAVT,EAUeE,QATZ,uBAajB,SAACgD,GAAD,OAAkB,4BAAQrG,QAASqG,GAAjB,e,4dCrD3B,IAAMC,EAAkBrF,IAAH,KAQfsF,EAAiBtF,IAAH,KAmELuF,EA3DD,SAAC,GAAiB,IAAf9G,EAAc,EAAdA,QAAc,EACH+F,oBAAS,GADN,mBACtBgB,EADsB,KACfC,EADe,OAEHjB,mBAAS,IAFN,mBAEtBkB,EAFsB,KAEfC,EAFe,OAGGnB,mBAAS,IAHZ,mBAGtBoB,EAHsB,KAGZC,EAHY,OAILrB,mBAAS,IAJJ,mBAItBrD,EAJsB,KAIhB2E,EAJgB,KAKvBC,EAAO,uCAAG,WAAOnF,GAAP,iBAAAoF,EAAA,wDACIR,EAAQ5E,EAAK4E,MAAQ5E,EAAKqF,OAApCC,EADM,EACNA,MACRC,EAAaD,GACbzH,EAAQQ,KAAR,KAHc,2CAAH,sDAKPkH,EAAe,SAACD,GACpBvH,aAAayH,QLhCS,aKgCWF,IAGnC,OACE,6BACE,wBAAIrH,UAAU,OAAO2G,EAAQ,QAAU,WACvC,yBAAK3G,UAAU,qBACX2G,GACA,2BACEb,MAAOxD,EACPyD,SAAU,SAACC,GAAD,OAAOiB,EAAQjB,EAAEC,OAAOH,QAClCI,KAAK,OACLC,YAAY,cAGhB,2BACEL,MAAOe,EACPd,SAAU,SAACC,GAAD,OAAOc,EAASd,EAAEC,OAAOH,QACnCI,KAAK,OACLC,YAAY,uBAEd,2BACEL,MAAOiB,EACPhB,SAAU,SAACC,GAAD,OAAOgB,EAAYhB,EAAEC,OAAOH,QACtCI,KAAK,WACLC,YAAY,4BAGhB,yBAAKnG,UAAU,YACb,kBAAC,IAAD,CACEwB,SAAUmF,EAAQF,EAAiBD,EACnC/E,UAAW,CAAEoF,QAAOE,WAAUzE,QAC9B8D,YAAa,SAACrE,GAAD,OAAUmF,EAAQnF,MAE9B,SAACP,GAAD,OACC,yBAAKxB,UAAU,qBAAqBE,QAASsB,GAC1CmF,EAAQ,QAAU,qBAIzB,yBAAK3G,UAAU,iBAAiBE,QAAS,kBAAM0G,GAAUD,KACtDA,EAAQ,6BAA+B,+B,oZCpElD,IAAMa,EAAoBrG,IAAH,KA+CRsG,eAxBA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EACH/B,mBAAS,IADN,mBACtBhC,EADsB,KACfgE,EADe,OAEDhC,mBAAS,IAFR,mBAEtBiC,EAFsB,KAEdC,EAFc,KAGvBC,EAAa,uCAAG,8BAAAX,EAAA,sEACCO,EAAOjE,MAAM,CAChCA,MAAO+D,EACP/F,UAAW,CAAEmG,YAHK,OACdG,EADc,OAKdpE,EAAQoE,EAAOhG,KAAK2B,KAAKC,MAC/BgE,EAAShE,GANW,2CAAH,qDAQnB,OACE,6BACE,6BACE,2BAAOuC,KAAK,OAAOH,SAAU,SAACC,GAAD,OAAO6B,EAAU7B,EAAEC,OAAOH,UACvD,4BAAQ5F,QAAS,kBAAM4H,MAAvB,WAEDnE,EAAMvB,OAASuB,EAAM2B,KAAI,SAAChE,EAAMD,GAAP,OACxB,kBAAC,EAAD,CAAMkE,IAAKjE,EAAKK,GAAIL,KAAMA,EAAMD,MAAOA,OACrC,4CClBK2G,MAlBf,WACE,OACE,yBAAKhI,UAAU,cACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,2BACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiI,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,IAAD,CAAUlI,GAAG,cACjD,kBAAC,IAAD,CAAOgI,OAAK,EAACC,KAAK,UAAUE,UAAW1C,IACvC,kBAAC,IAAD,CAAOuC,OAAK,EAACC,KAAK,SAASE,UAAW1B,IACtC,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,UAAUE,UAAWC,IACvC,kBAAC,IAAD,CAAOJ,OAAK,EAACC,KAAK,OAAOE,UAAWzF,IACpC,kBAAC,IAAD,CAAOsF,OAAK,EAACC,KAAK,aAAaE,UAAWzF,QCJ9C2F,G,MAAWC,YAAe,CAC9BC,IAAK,4CAGDC,EAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAC1BvB,EAAQvH,aAAaC,QRvBH,cQwBxB,MAAO,CACL6I,QAAQ,eACHA,EADE,CAELC,cAAexB,EAAK,iBAAaA,GAAU,SAK3CyB,GAAS,IAAIC,IAAc,CAC/BP,IAAI,qCACJQ,QAAS,CACPC,WAAW,EACXC,iBAAkB,CAChBrJ,UAAWC,aAAaC,QRrCJ,kBQ0CpBuB,GAAO6H,aACX,YAAgB,IAAb1F,EAAY,EAAZA,MAAY,EACe2F,YAAkB3F,GAAtC4F,EADK,EACLA,KAAMC,EADD,EACCA,UACd,MAAgB,wBAATD,GAAgD,iBAAdC,IAE3CR,GACAL,EAASc,OAAOjB,IAGZZ,GAAS,IAAI8B,IAAa,CAC9BlI,QACAmI,MAAO,IAAIC,MAGbC,IAASxB,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAgBT,OAAQA,IACtB,kBAAC,EAAD,QAGJvD,SAASyF,eAAe,SVqEpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlG,GACLmG,QAAQnG,MAAMA,EAAMoG,c","file":"static/js/main.c68feb35.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { withRouter } from \"react-router\";\nimport { AUTH_TOKEN } from \"../constants\";\n\nconst Header = ({ history }) => {\n  const authToken = localStorage.getItem(AUTH_TOKEN);\n  return (\n    <div className=\"flex pa1 justify-between nowrap orange\">\n      <div className=\"flex flex-fixed black\">\n        <div className=\"fw7 mr1\">\n          <Link to=\"/\" className=\"ml1 no-underline black\">\n            Hacker News\n          </Link>\n        </div>\n        <Link to=\"/\" className=\"ml1 no-underline black\">\n          new\n        </Link>\n        <div className=\"ml1\">|</div>\n        <Link to=\"/top\" className=\"ml1 no-underline black\">\n          top\n        </Link>\n        <div className=\"ml1\">|</div>\n        <Link to=\"/search\" className=\"ml1 no-underline black\">\n          search\n        </Link>\n        {authToken && (\n          <div className=\"flex\">\n            <div className=\"ml1\">|</div>\n            <Link to=\"/create\" className=\"ml1 no-underline black\">\n              submit\n            </Link>\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-fixed\">\n        {authToken ? (\n          <div\n            className=\"ml1 pointer black\"\n            onClick={() => {\n              localStorage.removeItem(AUTH_TOKEN);\n              history.push(`/`);\n            }}\n          >\n            logout\n          </div>\n        ) : (\n          <Link to=\"/login\" className=\"ml1 no-underline black\">\n            login\n          </Link>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default withRouter(Header);\n","export const AUTH_TOKEN = 'auth-token'\nexport const LINKS_PER_PAGE = 5","function timeDifference(current, previous) {\n  const milliSecondsPerMinute = 60 * 1000\n  const milliSecondsPerHour = milliSecondsPerMinute * 60\n  const milliSecondsPerDay = milliSecondsPerHour * 24\n  const milliSecondsPerMonth = milliSecondsPerDay * 30\n  const milliSecondsPerYear = milliSecondsPerDay * 365\n  const elapsed = current - previous\n\n  if (elapsed < milliSecondsPerMinute / 3) {\n    return 'just now'\n  }\n\n  if (elapsed < milliSecondsPerMinute) {\n    return 'less than 1 min ago'\n  } else if (elapsed < milliSecondsPerHour) {\n    return Math.round(elapsed / milliSecondsPerMinute) + ' min ago'\n  } else if (elapsed < milliSecondsPerDay) {\n    return Math.round(elapsed / milliSecondsPerHour) + ' h ago'\n  } else if (elapsed < milliSecondsPerMonth) {\n    return Math.round(elapsed / milliSecondsPerDay) + ' days ago'\n  } else if (elapsed < milliSecondsPerYear) {\n    return Math.round(elapsed / milliSecondsPerMonth) + ' mo ago'\n  } else {\n    return Math.round(elapsed / milliSecondsPerYear) + ' years ago'\n  }\n}\n\nexport function timeDifferenceForDate(date) {\n  const now = new Date().getTime()\n  const updated = new Date(date).getTime()\n  return timeDifference(now, updated)\n}","import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { Mutation } from \"react-apollo\";\nimport { AUTH_TOKEN } from \"../constants\";\nimport { timeDifferenceForDate } from \"../utils\";\n\nconst VOTE_MUTATION = gql`\n  mutation VoteMutation($linkId: ID!) {\n    vote(linkId: $linkId) {\n      id\n      link {\n        id\n        votes {\n          id\n          user {\n            id\n          }\n        }\n      }\n      user {\n        id\n      }\n    }\n  }\n`;\n\nconst Link = ({ index, link, updateStoreAfterVote }) => {\n  const authToken = localStorage.getItem(AUTH_TOKEN);\n  return (\n    <div className=\"flex mt2 items-start\">\n      <div className=\"flex items-center\">\n        <span className=\"gray\">{index + 1}.</span>\n        {authToken && (\n          <Mutation\n            mutation={VOTE_MUTATION}\n            variables={{ linkId: link.id }}\n            update={(store, { data: { vote } }) =>\n              updateStoreAfterVote(store, vote, link.id)\n            }\n          >\n            {(voteMutation) => (\n              <div className=\"ml1 gray f11\" onClick={voteMutation}>\n                ▲\n              </div>\n            )}\n          </Mutation>\n        )}\n      </div>\n      <div className=\"ml1\">\n        <div>\n          {link.description} ({link.url})\n        </div>\n        <div className=\"f6 lh-copy gray\">\n          {link.votes.length} votes | by{\" \"}\n          {link.postedBy ? link.postedBy.name : \"Unknown\"}{\" \"}\n          {timeDifferenceForDate(link.createdAt)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Link;\n","import React, { Fragment } from \"react\";\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport Link from \"./Link\";\nimport { LINKS_PER_PAGE } from \"../constants\";\n\nexport const FEED_QUERY = gql`\n  query FeedQuery($first: Int, $skip: Int, $orderBy: LinkOrderByInput) {\n    feed(first: $first, skip: $skip, orderBy: $orderBy) {\n      links {\n        id\n        createdAt\n        url\n        description\n        postedBy {\n          id\n          name\n        }\n        votes {\n          id\n          user {\n            id\n          }\n        }\n      }\n      count\n    }\n  }\n`;\nconst NEW_LINKS_SUBSCRIPTION = gql`\n  subscription {\n    newLink {\n      id\n      url\n      description\n      createdAt\n      postedBy {\n        id\n        name\n      }\n      votes {\n        id\n        user {\n          id\n        }\n      }\n    }\n  }\n`;\nconst NEW_VOTES_SUBSCRIPTION = gql`\n  subscription {\n    newVote {\n      id\n      link {\n        id\n        url\n        description\n        createdAt\n        postedBy {\n          id\n          name\n        }\n        votes {\n          id\n          user {\n            id\n          }\n        }\n      }\n      user {\n        id\n      }\n    }\n  }\n`;\n\nconst LinkList = (props) => {\n  const updateCacheAfterVote = (store, createVote, linkId) => {\n    const isNewPage = props.location.pathname.includes('new')\n    const page = parseInt(props.match.params.page, 10)\n    const skip = isNewPage ? (page - 1) * LINKS_PER_PAGE : 0\n    const first = isNewPage ? LINKS_PER_PAGE : 100\n    const orderBy = isNewPage ? 'createdAt_DESC' : null\n    const data = store.readQuery({\n      query: FEED_QUERY,\n      variables: { first, skip, orderBy }\n    })\n    const votedLink = data.feed.links.find((link) => link.id === linkId);\n    votedLink.votes = createVote.link.votes;\n    store.writeQuery({ query: FEED_QUERY, data });\n  };\n  const subscribeToNewLinks = (subscribeToMore) => {\n    subscribeToMore({\n      document: NEW_LINKS_SUBSCRIPTION,\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n        const newLink = subscriptionData.data.newLink;\n        const exists = prev.feed.links.find(({ id }) => id === newLink.id);\n        if (exists) return prev;\n        return Object.assign({}, prev, {\n          feed: {\n            links: [newLink, ...prev.feed.links],\n            count: prev.feed.links.length + 1,\n            __typename: prev.feed.__typename,\n          },\n        });\n      },\n    });\n  };\n  const subscribeToNewVotes = (subscribeToMore) => {\n    subscribeToMore({\n      document: NEW_VOTES_SUBSCRIPTION,\n    });\n  };\n  const getQueryVariables = () => {\n    const isNewPage = props.location.pathname.includes(\"new\");\n    const page = parseInt(props.match.params.page, 10);\n    const skip = isNewPage ? (page - 1) * LINKS_PER_PAGE : 0;\n    const first = isNewPage ? LINKS_PER_PAGE : 100;\n    const orderBy = isNewPage ? \"createdAt_DESC\" : null;\n    return { first, skip, orderBy };\n  };\n  const getLinksToRender = data => {\n    const isNewPage = props.location.pathname.includes('new')\n    if (isNewPage) {\n      return data.feed.links\n    }\n    const rankedLinks = data.feed.links.slice()\n    rankedLinks.sort((l1, l2) => l2.votes.length - l1.votes.length)\n    return rankedLinks\n  }\n  const nextPage = data => {\n    const page = parseInt(props.match.params.page, 10)\n    if (page <= data.feed.count / LINKS_PER_PAGE) {\n      const nextPage = page + 1\n      props.history.push(`/new/${nextPage}`)\n    }\n  }\n  const previousPage = () => {\n    const page = parseInt(props.match.params.page, 10)\n    if (page > 1) {\n      const previousPage = page - 1\n      props.history.push(`/new/${previousPage}`)\n    }\n  }\n  \n  return (\n    <Query query={FEED_QUERY} variables={getQueryVariables()}>\n      {({ loading, error, data, subscribeToMore }) => {\n        if (loading) return <div>Fetching</div>;\n        if (error) return <div>Error</div>;\n\n        subscribeToNewLinks(subscribeToMore);\n        subscribeToNewVotes(subscribeToMore);\n\n        const linksToRender = getLinksToRender(data);\n        const isNewPage = props.location.pathname.includes(\"new\");\n        const pageIndex = props.match.params.page\n          ? (props.match.params.page - 1) * LINKS_PER_PAGE\n          : 0;\n\n        return (\n          <Fragment>\n            {linksToRender.map((link, index) => (\n              <Link\n                key={link.id}\n                link={link}\n                index={index + pageIndex}\n                updateCacheAfterVote={updateCacheAfterVote}\n              />\n            ))}\n            {isNewPage && (\n              <div className=\"flex ml4 mv3 gray\">\n                <div className=\"pointer mr2\" onClick={previousPage}>\n                  Previous\n                </div>\n                <div className=\"pointer\" onClick={() => nextPage(data)}>\n                  Next\n                </div>\n              </div>\n            )}\n          </Fragment>\n        );\n      }}\n    </Query>\n  );\n};\n\nexport default LinkList;\n","import React, { useState } from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { FEED_QUERY } from \"./LinkList\";\nimport { LINKS_PER_PAGE } from \"../constants\"\n\nconst POST_MUTATION = gql`\n  mutation PostMutation($description: String!, $url: String!) {\n    post(description: $description, url: $url) {\n      id\n      createdAt\n      url\n      description\n    }\n  }\n`;\n\nconst CreateLink = ({ history }) => {\n  const [description, setDescription] = useState(\"\");\n  const [url, setUrl] = useState(\"\");\n  return (\n    <div>\n      <div className=\"flex flex-column mt3\">\n        <input\n          className=\"mb2\"\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n          type=\"text\"\n          placeholder=\"A description for the link\"\n        />\n        <input\n          className=\"mb2\"\n          value={url}\n          onChange={(e) => setUrl(e.target.value)}\n          type=\"text\"\n          placeholder=\"The URL for the link\"\n        />\n      </div>\n      <Mutation\n        mutation={POST_MUTATION}\n        variables={{ description, url }}\n        onCompleted={() => history.push('/new/1')}\n        update={(store, { data: { post } }) => {\n          const first = LINKS_PER_PAGE\n          const skip = 0\n          const orderBy = 'createdAt_DESC'\n          const data = store.readQuery({\n            query: FEED_QUERY,\n            variables: { first, skip, orderBy }\n          })\n          data.feed.links.unshift(post)\n          store.writeQuery({\n            query: FEED_QUERY,\n            data,\n            variables: { first, skip, orderBy }\n          })\n        }}\n      >\n        {(postMutation) => <button onClick={postMutation}>Submit</button>}\n      </Mutation>\n    </div>\n  );\n};\n\nexport default CreateLink;\n","import React, { useState } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Mutation } from \"react-apollo\";\nimport { AUTH_TOKEN } from \"../constants\";\n\nconst SIGNUP_MUTATION = gql`\n  mutation SignupMutation($email: String!, $password: String!, $name: String!) {\n    signup(email: $email, password: $password, name: $name) {\n      token\n    }\n  }\n`;\n\nconst LOGIN_MUTATION = gql`\n  mutation LoginMutation($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n    }\n  }\n`;\n\nconst Login = ({ history }) => {\n  const [login, setLogin] = useState(true);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const confirm = async (data) => {\n    const { token } = login ? data.login : data.signup;\n    saveUserData(token);\n    history.push(`/`);\n  };\n  const saveUserData = (token) => {\n    localStorage.setItem(AUTH_TOKEN, token);\n  };\n\n  return (\n    <div>\n      <h4 className=\"mv3\">{login ? \"Login\" : \"Sign Up\"}</h4>\n      <div className=\"flex flex-column\">\n        {!login && (\n          <input\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            type=\"text\"\n            placeholder=\"Your name\"\n          />\n        )}\n        <input\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          type=\"text\"\n          placeholder=\"Your email address\"\n        />\n        <input\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          type=\"password\"\n          placeholder=\"Choose a safe password\"\n        />\n      </div>\n      <div className=\"flex mt3\">\n        <Mutation\n          mutation={login ? LOGIN_MUTATION : SIGNUP_MUTATION}\n          variables={{ email, password, name }}\n          onCompleted={(data) => confirm(data)}\n        >\n          {(mutation) => (\n            <div className=\"pointer mr2 button\" onClick={mutation}>\n              {login ? \"login\" : \"create account\"}\n            </div>\n          )}\n        </Mutation>\n        <div className=\"pointer button\" onClick={() => setLogin(!login)}>\n          {login ? \"need to create an account?\" : \"already have an account?\"}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport { withApollo } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport Link from \"./Link\";\n\nconst FEED_SEARCH_QUERY = gql`\n  query FeedSearchQuery($filter: String!) {\n    feed(filter: $filter) {\n      links {\n        id\n        url\n        description\n        createdAt\n        postedBy {\n          id\n          name\n        }\n        votes {\n          id\n          user {\n            id\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst Search = ({ client }) => {\n  const [links, setLinks] = useState([]);\n  const [filter, setFilter] = useState(\"\");\n  const executeSearch = async () => {\n    const result = await client.query({\n      query: FEED_SEARCH_QUERY,\n      variables: { filter },\n    });\n    const links = result.data.feed.links;\n    setLinks(links);\n  };\n  return (\n    <div>\n      <div>\n        <input type=\"text\" onChange={(e) => setFilter(e.target.value)} />\n        <button onClick={() => executeSearch()}>search</button>\n      </div>\n      {links.length ? links.map((link, index) => (\n        <Link key={link.id} link={link} index={index} />\n      )): <div>nothing</div>}\n    </div>\n  );\n};\n\nexport default withApollo(Search);\n","import React from \"react\";\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport \"../styles/App.css\";\n\n// Components\nimport Header from \"./Header\";\nimport LinkList from \"./LinkList\";\nimport CreateLink from \"./CreateLink\";\nimport Login from \"./Login\";\nimport Search from \"./Search\";\n\nfunction App() {\n  return (\n    <div className=\"center w85\">\n      <Header />\n      <div className=\"ph3 pv1 background-gray\">\n        <Switch>\n          <Route exact path='/' render={() => <Redirect to='/new/1' />} />\n          <Route exact path=\"/create\" component={CreateLink} />\n          <Route exact path=\"/login\" component={Login} />\n          <Route exact path=\"/search\" component={Search} />\n          <Route exact path='/top' component={LinkList} />\n          <Route exact path='/new/:page' component={LinkList} />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from 'react-router-dom'\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { ApolloProvider } from \"react-apollo\";\nimport { ApolloClient } from \"apollo-client\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { setContext } from 'apollo-link-context';\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { split } from 'apollo-link'\nimport { WebSocketLink } from 'apollo-link-ws'\nimport { getMainDefinition } from 'apollo-utilities'\n\nimport App from \"./components/App\";\nimport { AUTH_TOKEN } from './constants'\nimport \"./styles/index.css\";\n\nconst httpLink = createHttpLink({\n  uri: \"https://hackernews-back.herokuapp.com/\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(AUTH_TOKEN)\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    }\n  }\n});\n\nconst wsLink = new WebSocketLink({\n  uri: `ws://hackernews-back.herokuapp.com`,\n  options: {\n    reconnect: true,\n    connectionParams: {\n      authToken: localStorage.getItem(AUTH_TOKEN),\n    }\n  }\n})\n\nconst link = split(\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query)\n    return kind === 'OperationDefinition' && operation === 'subscription'\n  },\n  wsLink,\n  authLink.concat(httpLink)\n)\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}